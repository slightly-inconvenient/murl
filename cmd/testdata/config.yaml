server:
  # Address to bind the server listener to
  address: "localhost:8080"

  # Required if TLS is wanted. If omitted, murl defaults to serving without TLS.
  #tls:
  #  cert: /path/to/tls/certificate
  #  key:  /path/to/tls/key

  documentation:
    # Templates may be provided to override the built in templates.
    templates: {}
      # A custom golang text/template for rendering the documentation page.
      # The template is given a html rendering of the content (defined below)
      # available as {{ .Content }}
      #
      # Primary use case is for defining e.g. custom layout, interactivity or styling
      # through inlined css or javascript.
      #
      # page: |
      #  <!DOCTYPE html>
      #  <html>
      #    <head>
      #      <title>My custom documentation page</title>
      #    </head>
      #    <body>
      #      {{ .Content }}
      #    </body>
      #  </html>

      # A custom golang text/template for rendering the body for the page may be provided.
      # The template is given a copy of the raw routes configuration as input and is
      # expected to produce valid GitHub Flavored Markdown. The routes are available
      # as {{ . }}
      #
      # Defaults to rendering documentation for all routes.
      # See internal/server/templates/content.md.tmpl for details.
      #
      # content: |
      #  # My special documentation page
      #  Whatever you'd like to add to the page context
      #  
      #  The default routes template may be rendered with:
      #  {{ template "routes" .}}
    
    # A custom path to the documentation page.
    # Default is site root ("/").
    #
    # path: /docs

routes:

- # Path to match against. Currently only GET requests are supported and "GET " is automatically prefixed to the path.
  # Any Go http.ServeMux supported patterns may be used.
  # Any path parameters are available later in params extraction through the GetParam method.
  path: /example/{rest}

  # Aliases allow for multiple paths to be matched to the same route.
  # They behave exactly as the path-value defined above.
  aliases:
    - /example2/{rest}
  
  # Each route may be accompanied by a human friendly title and description.
  # These are used to render the root page containing the routes documentation.
  #
  # With the default template the following constraints apply:
  # - If title is omitted the route is not rendered in the documentation.
  # - If description is omitted the title, path and aliases are rendered but a description section omitted.
  #
  # GitHub Flavored Markdown is supported through https://github.com/yuin/goldmark library.
  documentation: 
    title: Sample route
    description: |
      ### Paths
      - /example/{rest}
      - /example2/{rest}
      ### Description
      An example route that picks params from the env, path, query, and headers

  # All environment variables made available to the route must be explicitly allow listed.
  # This is to prevent accidental use of sensitive environment variables if an input param is used to determine the env variable name.
  environment:
    allowlist:
      - EXAMPLE_HOST

  # Params must be explicitly defined for the latter stages.
  # The key registered in params is available for use later in checks and the redirect url template.
  # The value can be any Go text/template compatible template string. The template is given an object as input with the following extraction methods:
  # - GetParam: Extracts a path parameter registered in the path
  # - GetEnv: Extracts an environment variable registered in the environment allowlist
  # - GetQuery: Extracts a query parameter from the request. Repeated query params are not supported following the Go http request query params get API.
  # - GetHeader: Extracts a header value from the request. Repeated header values are not supported following the Go http request header get API.
  params:
    path: '{{.GetPath "rest"}}'
    host: '{{.GetEnv "EXAMPLE_HOST"}}'
    query: '{{.GetQuery "query"}}'
    contentType: '{{.GetHeader "content-type"}}'

  # Checks may be used to validate the input params or any other condition before redirecting.
  # The expr field can be any Common Expression Language (CEL) compatible expression.
  # The params object is available as an input to the expression.
  # The error field is the error message to return if the expression evaluates to false.
  # It may be any Go text/template compatible template string and is given the same params object as input.
  checks: 
  - expr: 'host != ""'
    error: "host is required"
  - expr: 'path != ""'
    error: "path is required"

  # Redirects are the final stage of the route and are used to redirect the request to another location.
  # The url field can be any Go text/template compatible template string.
  # The template is given the same params object as input.
  redirect:
    url: "https://{{.host}}/any/will/do/{{.path}}?q={{.query}}&h={{.contentType}}"